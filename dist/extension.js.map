{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://labinsight/./src/extension.ts","webpack://labinsight/./src/provider.ts","webpack://labinsight/./src/treeItem.ts","webpack://labinsight/external commonjs \"vscode\"","webpack://labinsight/external node-commonjs \"fs\"","webpack://labinsight/external node-commonjs \"path\"","webpack://labinsight/webpack/bootstrap","webpack://labinsight/webpack/startup"],"sourcesContent":["import * as vscode from \"vscode\";\nimport { LabinsightViewerProvider } from \"./provider\";\nimport { TreeItem } from \"./treeItem\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  const treeDataProvider = new LabinsightViewerProvider();\n  vscode.window.createTreeView(\"labinsightViewerView\", {\n    treeDataProvider,\n  });\n\n  // Enregistrer les commandes\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      \"labinsightViewer.scanForLabinsight\",\n      () => {\n        vscode.window.showInformationMessage(\n          \"Scanning all workspaces for .labinsight files...\"\n        );\n        treeDataProvider.scanAllWorkspaces();\n      }\n    ),\n    vscode.commands.registerCommand(\"labinsightViewer.refresh\", () => {\n      treeDataProvider.refresh();\n    }),\n    vscode.commands.registerCommand(\"labinsightViewer.goBackToMenu\", () => {\n      treeDataProvider.showMainMenu();\n    }),\n    vscode.commands.registerCommand(\n      \"labinsightViewer.initializeLabinsight\",\n      () => {\n        // Implémenter la logique d'initialisation si nécessaire\n        vscode.window.showInformationMessage(\n          \"Initialize Labinsight functionality not implemented yet.\"\n        );\n      }\n    ),\n    vscode.commands.registerCommand(\n      \"labinsightViewer.refreshWorkspace\",\n      (treeItem: TreeItem) => {\n        if (treeItem.workspacePath) {\n          vscode.window.showInformationMessage(\n            `Refreshing Labinsight for workspace: ${path.basename(\n              treeItem.workspacePath\n            )}`\n          );\n          treeDataProvider.loadLabinsightConfig(\n            treeItem.workspacePath,\n            treeDataProvider.labinsightFiles[treeItem.workspacePath]\n          );\n          treeDataProvider.refresh();\n        }\n      }\n    ),\n    // Enregistrer la nouvelle commande pour créer un fichier Labinsight\n    vscode.commands.registerCommand(\n      \"labinsightViewer.createLabinsightFile\",\n      async () => {\n        await createLabinsightFile(treeDataProvider);\n      }\n    )\n  );\n}\n\nexport function deactivate() {}\n\nasync function createLabinsightFile(provider: LabinsightViewerProvider) {\n  try {\n    // Récupérer les workspaces disponibles\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n    if (!workspaceFolders || workspaceFolders.length === 0) {\n      vscode.window.showErrorMessage(\"No workspace folders are open.\");\n      return;\n    }\n\n    // Si un seul workspace, le sélectionner automatiquement\n    let selectedWorkspace: vscode.WorkspaceFolder | undefined;\n    if (workspaceFolders.length === 1) {\n      selectedWorkspace = workspaceFolders[0];\n    } else {\n      // Si plusieurs workspaces, demander à l'utilisateur de sélectionner\n      selectedWorkspace = await vscode.window.showWorkspaceFolderPick({\n        placeHolder: \"Select a workspace to create the Labinsight file\",\n      });\n      if (!selectedWorkspace) {\n        vscode.window.showWarningMessage(\"No workspace selected.\");\n        return;\n      }\n    }\n\n    // Définir le nom de fichier fixe\n    const fileName = \".labinsight\";\n\n    // Définir le chemin complet du fichier\n    const filePath = path.join(selectedWorkspace.uri.fsPath, fileName);\n\n    // Vérifier si le fichier existe déjà\n    if (fs.existsSync(filePath)) {\n      const overwrite = await vscode.window.showWarningMessage(\n        `File \"${fileName}\" already exists in the workspace. Do you want to overwrite it?`,\n        { modal: true },\n        \"Yes\",\n        \"No\"\n      );\n      if (overwrite !== \"Yes\") {\n        vscode.window.showInformationMessage(\"Operation cancelled.\");\n        return;\n      }\n    }\n\n    // Créer un contenu de base pour le fichier Labinsight\n    const initialContent = {\n      $schema: \"https://lab-insight.web.app/config.schema.json\",\n      version: 2,\n      projectName: path.basename(selectedWorkspace.uri.fsPath),\n      projectType: \"none\",\n      engine: \"none\",\n      environment: \"development\",\n      linting: \"none\",\n      ignoredDirectories: [\n        \"node_modules\",\n        \".git\",\n        \"dist\",\n        \"reports\",\n        \"rules\",\n        \"build\",\n        \"out\",\n        \"temp\",\n        \"tmp\",\n        \"reports\",\n        \"logs\",\n      ],\n      ignoredFiles: [\n        \".labinsight\",\n        \".gitignore\",\n        \".npmignore\",\n        \".prettierignore\",\n        \".eslintignore\",\n        \"package-lock.json\",\n        \"package.json\",\n        \"tsconfig.json\",\n        \"README.md\",\n        \"CHANGELOG.md\",\n        \"LICENCE\",\n        \"ROADMAP.md\",\n        \"gulpfile.js\",\n        \"webpack.config.js\",\n        \"rollup.config.js\",\n        \"jest.config.js\",\n        \"gruntfile.js\",\n      ],\n      customRules: {},\n      rules: {\n        \"py.require-function-description\": {\n          severity: \"error\",\n        },\n        \"py.require-class-description\": {\n          severity: \"error\",\n        },\n        \"py.casing-class\": {\n          severity: \"error\",\n          options: {\n            casing: \"PascalCase\",\n          },\n        },\n        \"py.casing-parameter\": {\n          severity: \"error\",\n          options: {\n            casing: \"snakeCase\",\n          },\n        },\n        \"py.casing-method\": {\n          severity: \"error\",\n          options: {\n            casing: \"snakeCase\",\n          },\n        },\n        \"py.casing-property\": {\n          severity: \"error\",\n          options: {\n            casing: \"snakeCase\",\n          },\n        },\n        \"py.casing-function\": {\n          severity: \"error\",\n          options: {\n            casing: \"snakeCase\",\n          },\n        },\n        \"py.max-file-lines\": {\n          severity: \"error\",\n          options: {\n            limit: 100,\n          },\n        },\n        \"py.max-function-lines\": {\n          severity: \"error\",\n          options: {\n            limit: 10,\n          },\n        },\n        \"py.max-method-lines\": {\n          severity: \"error\",\n          options: {\n            limit: 10,\n          },\n        },\n        \"js.max-lines\": {\n          severity: \"error\",\n          options: {\n            limit: 100,\n          },\n        },\n        \"js.max-method-lines\": {\n          severity: \"error\",\n          options: {\n            limit: 25,\n          },\n        },\n        \"js.max-function-lines\": {\n          severity: \"error\",\n          options: {\n            limit: 25,\n          },\n        },\n        \"js.max-array-length\": {\n          severity: \"error\",\n          options: {\n            limit: 50,\n          },\n        },\n        \"js.require-method-description\": {\n          severity: \"error\",\n        },\n        \"js.require-function-description\": {\n          severity: \"error\",\n        },\n        \"js.require-try-catch\": {\n          severity: \"error\",\n        },\n        \"js.casing-class\": {\n          severity: \"error\",\n          options: {\n            casing: \"pascalCase\",\n          },\n        },\n        \"js.casing-parameter\": {\n          severity: \"error\",\n          options: {\n            casing: \"camelCase\",\n          },\n        },\n        \"js.casing-method\": {\n          severity: \"error\",\n          options: {\n            casing: \"camelCase\",\n          },\n        },\n        \"js.casing-property\": {\n          severity: \"error\",\n          options: {\n            casing: \"camelCase\",\n          },\n        },\n        \"ts.max-file-lines\": {\n          severity: \"error\",\n          options: {\n            limit: 100,\n          },\n        },\n        \"ts.max-class-lines\": {\n          severity: \"error\",\n          options: {\n            limit: 50,\n          },\n        },\n        \"ts.max-method-lines\": {\n          severity: \"error\",\n          options: {\n            limit: 10,\n          },\n        },\n        \"ts.max-function-lines\": {\n          severity: \"error\",\n          options: {\n            limit: 10,\n          },\n        },\n        \"ts.max-interface-lines\": {\n          severity: \"error\",\n          options: {\n            limit: 10,\n          },\n        },\n        \"ts.max-enum-lines\": {\n          severity: \"error\",\n          options: {\n            limit: 10,\n          },\n        },\n        \"ts.max-type-lines\": {\n          severity: \"error\",\n          options: {\n            limit: 10,\n          },\n        },\n        \"ts.max-array-length\": {\n          severity: \"error\",\n          options: {\n            limit: 50,\n          },\n        },\n        \"ts.require-function-description\": {\n          severity: \"error\",\n        },\n        \"ts.require-method-description\": {\n          severity: \"error\",\n        },\n        \"ts.require-class-description\": {\n          severity: \"error\",\n        },\n        \"ts.require-interface-description\": {\n          severity: \"error\",\n        },\n        \"ts.require-try-catch\": {\n          severity: \"error\",\n        },\n        \"ts.casing-function\": {\n          severity: \"error\",\n          options: {\n            casing: \"camelCase\",\n          },\n        },\n        \"ts.casing-class\": {\n          severity: \"error\",\n          options: {\n            casing: \"pascalCase\",\n          },\n        },\n        \"ts.casing-parameter\": {\n          severity: \"error\",\n          options: {\n            casing: \"camelCase\",\n          },\n        },\n        \"ts.casing-method\": {\n          severity: \"error\",\n          options: {\n            casing: \"camelCase\",\n          },\n        },\n        \"ts.casing-property\": {\n          severity: \"error\",\n          options: {\n            casing: \"camelCase\",\n          },\n        },\n        \"ts.casing-type\": {\n          severity: \"error\",\n          options: {\n            casing: \"pascalCase\",\n          },\n        },\n        \"ts.casing-interface\": {\n          severity: \"error\",\n          options: {\n            casing: \"pascalCase\",\n          },\n        },\n        \"ts.casing-enum\": {\n          severity: \"error\",\n          options: {\n            casing: \"pascalCase\",\n          },\n        },\n      },\n    };\n\n    // Écrire le fichier\n    fs.writeFileSync(\n      filePath,\n      JSON.stringify(initialContent, null, 2),\n      \"utf-8\"\n    );\n    vscode.window.showInformationMessage(\n      `Labinsight file \"${fileName}\" created successfully.`\n    );\n\n    // Ouvrir le fichier dans l'éditeur\n    const document = await vscode.workspace.openTextDocument(filePath);\n    await vscode.window.showTextDocument(document);\n\n    // Actualiser le TreeView pour refléter le nouveau fichier\n    provider.scanAllWorkspaces();\n  } catch (error) {\n    vscode.window.showErrorMessage(\n      `Failed to create Labinsight file: ${error}`\n    );\n  }\n}\n","import * as vscode from \"vscode\";\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\nimport { TreeItem } from \"./treeItem\";\r\n\r\nexport class LabinsightViewerProvider\r\n  implements vscode.TreeDataProvider<TreeItem>\r\n{\r\n  private _onDidChangeTreeData: vscode.EventEmitter<\r\n    TreeItem | undefined | null | void\r\n  > = new vscode.EventEmitter<TreeItem | undefined | null | void>();\r\n  readonly onDidChangeTreeData: vscode.Event<\r\n    TreeItem | undefined | null | void\r\n  > = this._onDidChangeTreeData.event;\r\n\r\n  public labinsightConfigs: { [workspace: string]: any } = {}; // Store config per workspace\r\n  public labinsightFiles: { [workspace: string]: string } = {}; // Store file paths per workspace\r\n\r\n  constructor() {\r\n    this.scanAllWorkspaces();\r\n  }\r\n\r\n  getTreeItem(element: TreeItem): vscode.TreeItem {\r\n    return element;\r\n  }\r\n\r\n  getChildren(element?: TreeItem): vscode.ProviderResult<TreeItem[]> {\r\n    // If no element is provided, display the main menu\r\n    if (!element) {\r\n      return this.getMainMenuItems();\r\n    }\r\n\r\n    // Handle \"Back to Menu\" button\r\n    if (element.contextValue === \"backToMenu\") {\r\n      // Refresh to show the main menu again\r\n      this.showMainMenu();\r\n      return [];\r\n    }\r\n\r\n    // If the element is a workspace, display its Labinsight rules or a message if none\r\n    if (element.contextValue === \"workspace\") {\r\n      const workspacePath = element.workspacePath;\r\n      const config = this.labinsightConfigs[workspacePath as string];\r\n      if (config) {\r\n        const ruleItems = this.parseLabinsightConfig(config.rules);\r\n        return ruleItems.length > 0\r\n          ? ruleItems\r\n          : [new TreeItem(\"No Labinsight rules found\", false)];\r\n      } else {\r\n        return [new TreeItem(\"No .labinsight file found\", false)];\r\n      }\r\n    }\r\n\r\n    // If the element is a rule, display its details\r\n    if (element.contextValue === \"rule\") {\r\n      return this.getRuleDetails(element.rule);\r\n    }\r\n\r\n    // If the element is an options node, display the options\r\n    if (element.contextValue === \"options\") {\r\n      return this.getRuleOptions(element.rule);\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  // Method to retrieve main menu items, including \"Back to Menu\" and workspaces\r\n  private getMainMenuItems(): TreeItem[] {\r\n    const items: TreeItem[] = [];\r\n\r\n    // Add all workspace folders\r\n    const workspaceFolders = vscode.workspace.workspaceFolders;\r\n    if (!workspaceFolders || workspaceFolders.length === 0) {\r\n      items.push(new TreeItem(\"No workspaces available\", false));\r\n      return items;\r\n    }\r\n\r\n    workspaceFolders.forEach((folder) => {\r\n      const workspacePath = folder.uri.fsPath;\r\n      const workspaceItem = new TreeItem(\r\n        path.basename(workspacePath),\r\n        true,\r\n        undefined,\r\n        undefined,\r\n        undefined,\r\n        \"workspace\", // contextValue to identify workspace items\r\n        workspacePath // custom property to store workspace path\r\n      );\r\n      items.push(workspaceItem);\r\n    });\r\n\r\n    return items;\r\n  }\r\n\r\n  // Method to parse Labinsight config and create rule TreeItems\r\n  private parseLabinsightConfig(rules: any): TreeItem[] {\r\n    const ruleItems: TreeItem[] = [];\r\n    for (const ruleName of Object.keys(rules)) {\r\n      const rule = rules[ruleName];\r\n      const ruleItem = new TreeItem(\r\n        ruleName,\r\n        true,\r\n        undefined,\r\n        rule,\r\n        {\r\n          light: path.join(\r\n            __filename,\r\n            \"..\",\r\n            \"..\",\r\n            \"resources\",\r\n            \"logo\",\r\n            this.getRuleIcon(ruleName) + \".svg\"\r\n          ),\r\n          dark: path.join(\r\n            __filename,\r\n            \"..\",\r\n            \"..\",\r\n            \"resources\",\r\n            \"logo\",\r\n            this.getRuleIcon(ruleName) + \".svg\"\r\n          ),\r\n        },\r\n        \"rule\" // contextValue to identify rule items\r\n      );\r\n      ruleItems.push(ruleItem);\r\n    }\r\n    return ruleItems;\r\n  }\r\n\r\n  // Method to get details of a specific rule\r\n  private getRuleDetails(rule: any): TreeItem[] {\r\n    const detailItems: TreeItem[] = [];\r\n\r\n    // Add \"Severity\" as a non-collapsible TreeItem\r\n    detailItems.push(new TreeItem(`Severity: ${rule.severity}`, false));\r\n\r\n    // Add \"Options\" as an expandable TreeItem if options exist\r\n    if (rule.options) {\r\n      const optionsTreeItem = new TreeItem(\r\n        \"Options\",\r\n        true,\r\n        undefined,\r\n        rule,\r\n        undefined,\r\n        \"options\"\r\n      );\r\n      detailItems.push(optionsTreeItem);\r\n    }\r\n\r\n    return detailItems;\r\n  }\r\n\r\n  // Method to get options of a rule\r\n  private getRuleOptions(rule: any): TreeItem[] {\r\n    const optionItems: TreeItem[] = [];\r\n    for (const optionName of Object.keys(rule.options)) {\r\n      const optionValue = rule.options[optionName];\r\n      const optionItem = new TreeItem(\r\n        `${optionName}: ${optionValue}`,\r\n        false,\r\n        undefined,\r\n        undefined,\r\n        undefined,\r\n        \"option\" // contextValue to identify option items\r\n      );\r\n      optionItems.push(optionItem);\r\n    }\r\n    return optionItems;\r\n  }\r\n\r\n  private getRuleIcon(ruleName: string) {\r\n    const extension = ruleName.startsWith(\"py\")\r\n      ? \"python\"\r\n      : ruleName.startsWith(\"js\")\r\n      ? \"javascript\"\r\n      : ruleName.startsWith(\"ts\")\r\n      ? \"typescript\"\r\n      : undefined;\r\n\r\n    return extension;\r\n  }\r\n\r\n  // Method to load Labinsight config for a specific workspace\r\n  public loadLabinsightConfig(workspacePath: string, filePath: string) {\r\n    if (fs.existsSync(filePath)) {\r\n      const content = fs.readFileSync(filePath, \"utf-8\");\r\n      this.labinsightConfigs[workspacePath] = JSON.parse(content);\r\n    } else {\r\n      this.labinsightConfigs[workspacePath] = null;\r\n    }\r\n  }\r\n\r\n  // Recursive method to find .labinsight file in a directory\r\n  public findLabinsightFile(\r\n    dir: string,\r\n    callback: (filePath: string | null) => void\r\n  ) {\r\n    const files = fs.readdirSync(dir);\r\n    for (const file of files) {\r\n      const filePath = path.join(dir, file);\r\n      const stat = fs.statSync(filePath);\r\n\r\n      if (stat.isDirectory()) {\r\n        this.findLabinsightFile(filePath, callback);\r\n      } else if (file === \".labinsight\") {\r\n        callback(filePath);\r\n        return;\r\n      }\r\n    }\r\n\r\n    callback(null);\r\n  }\r\n\r\n  // Method to scan all workspaces for .labinsight files\r\n  public scanAllWorkspaces() {\r\n    const workspaceFolders = vscode.workspace.workspaceFolders;\r\n    if (workspaceFolders) {\r\n      workspaceFolders.forEach((folder) => {\r\n        const workspacePath = folder.uri.fsPath;\r\n        this.findLabinsightFile(workspacePath, (filePath) => {\r\n          if (filePath) {\r\n            this.labinsightFiles[workspacePath] = filePath;\r\n            this.loadLabinsightConfig(workspacePath, filePath);\r\n          } else {\r\n            this.labinsightConfigs[workspacePath] = null;\r\n          }\r\n          this.refresh();\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  // Method to show the main menu (workspace list)\r\n  public showMainMenu() {\r\n    // Simply refresh to show the main menu\r\n    this.refresh();\r\n  }\r\n\r\n  // Method to refresh the TreeView\r\n  public refresh(): void {\r\n    this._onDidChangeTreeData.fire();\r\n  }\r\n}\r\n","import * as vscode from \"vscode\";\r\n\r\nexport class TreeItem extends vscode.TreeItem {\r\n  public workspacePath?: string; // Only for workspace items\r\n\r\n  constructor(\r\n    public readonly label: string,\r\n    public readonly collapsible: boolean = false,\r\n    public readonly commandId?: string,\r\n    public readonly rule?: any, // The associated rule (optional)\r\n    public readonly iconPath?: { light: string; dark: string } | string,\r\n    public readonly contextValue?: string, // To identify the type of item\r\n    workspacePath?: string // Path for workspace items\r\n  ) {\r\n    super(\r\n      label,\r\n      collapsible\r\n        ? vscode.TreeItemCollapsibleState.Collapsed\r\n        : vscode.TreeItemCollapsibleState.None\r\n    );\r\n\r\n    // Assign the command if provided\r\n    if (commandId) {\r\n      this.command = {\r\n        command: commandId,\r\n        title: label,\r\n      };\r\n    }\r\n\r\n    // Assign the icon if provided\r\n    if (typeof iconPath === \"string\") {\r\n      this.iconPath = iconPath;\r\n    } else if (iconPath) {\r\n      this.iconPath = iconPath;\r\n    }\r\n\r\n    // Assign contextValue for identification in getChildren\r\n    if (contextValue) {\r\n      this.contextValue = contextValue;\r\n    }\r\n\r\n    // Assign workspacePath if provided\r\n    if (workspacePath) {\r\n      this.workspacePath = workspacePath;\r\n    }\r\n  }\r\n}\r\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","treeDataProvider","LabinsightViewerProvider","vscode","window","createTreeView","subscriptions","push","commands","registerCommand","showInformationMessage","scanAllWorkspaces","refresh","showMainMenu","treeItem","workspacePath","path","basename","loadLabinsightConfig","labinsightFiles","async","provider","workspaceFolders","workspace","length","showErrorMessage","selectedWorkspace","showWorkspaceFolderPick","placeHolder","showWarningMessage","fileName","filePath","join","uri","fsPath","fs","existsSync","modal","initialContent","$schema","version","projectName","projectType","engine","environment","linting","ignoredDirectories","ignoredFiles","customRules","rules","severity","options","casing","limit","writeFileSync","JSON","stringify","document","openTextDocument","showTextDocument","error","createLabinsightFile","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","this","event","labinsightConfigs","constructor","getTreeItem","element","getChildren","getMainMenuItems","contextValue","config","ruleItems","parseLabinsightConfig","TreeItem","getRuleDetails","rule","getRuleOptions","items","forEach","folder","workspaceItem","undefined","ruleName","Object","keys","ruleItem","light","__filename","getRuleIcon","dark","detailItems","optionsTreeItem","optionItems","optionName","optionValue","optionItem","startsWith","content","readFileSync","parse","findLabinsightFile","dir","callback","files","readdirSync","file","statSync","isDirectory","fire","label","collapsible","commandId","iconPath","super","TreeItemCollapsibleState","Collapsed","None","command","title","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}